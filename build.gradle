/*
 * Copyright 2017-2018 Kaidan Gustave
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Version {
    String major, minor, build

    @Override
    String toString() {
        "${major}.${minor}.${this.build}"
    }
}

buildscript {
    ext {
        kotlin_version = '1.2.30'
        kotlinx_version = '0.22.3'
        kotlin_json_version = '1.2.1'
        ktor_version = '0.9.2-alpha-2'
        shadow_version = '2.0.1'
        jda_version = '3.5.0_338'
        jda_utilities_version = '2.1'
        jda_audio_version = '91438c36d7107cf838c2f2eb147b08f989d929db'
        jda_nas_version = '1.0.6.1-JDA-Audio'
        jda_async_packet_version = '1.1'
        lavaplayer_version = '1.2.49'
        lavalink_version = '67c4656'
        hocon_version = '3.3'
        jsoup_version = '1.10.2'
        youtube_api_version = 'v3-rev189-1.23.0'
        h2_version = '1.4.196'
        slf4j_version = '1.7.25'
        logback_version = '1.2.3'
        jagtag_version = '0.5'
        junit_version = '1.0.1'
        jupiter_version = '5.0.1'
    }

    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.github.jengelman.gradle.plugins:shadow:$shadow_version"
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junit_version"
    }
}

def ver = new Version(major: 0, minor: 8, build: 6)

allprojects {
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'idea'
    apply plugin: 'com.github.johnrengelman.shadow'

    group 'xyz.nightfury'
    version ver.toString()

    sourceCompatibility = 9
    targetCompatibility = 9

    project.ext {
        versionObj = ver

        project.repositories {
            ktor = {
                maven { url "http://dl.bintray.com/kotlin/ktor" }
            }
            jitpack = {
                maven {
                    url 'https://jitpack.io/'
                }
            }
        }

        project.dependencies {
            kotlinModule = { String module -> "org.jetbrains.kotlin:kotlin-$module:$kotlin_version" }
            kotlinxModule = { String module -> "org.jetbrains.kotlinx:kotlinx-$module:$kotlinx_version" }
            kotlinJson = { "me.kgustave:kotlin-json-core:$kotlin_json_version" }
            ktorModule = { String module -> "io.ktor:ktor-$module:$ktor_version" }
            ktorServer = { String module = "core" -> ktorModule("server-$module") }

            JDA = { "net.dv8tion:JDA:$jda_version" }
            JDAUtilities = { String module -> "com.github.JDA-Applications.JDA-Utilities" +
                    ":jda-utilities-$module:feature~oauth2-SNAPSHOT" }
            JDAAudio = { String commit -> "com.github.DV8FromTheWorld:JDA-Audio:$commit" }
            lavaServerResources = {
                ["com.github.DV8FromTheWorld:JDA-Audio:$jda_audio_version",
                 "com.github.FredBoat:jda-nas:$jda_nas_version",
                 "com.github.shredder121:jda-async-packetprovider:$jda_async_packet_version"]
            }
            lavaplayer = { "com.sedmelluq:lavaplayer:$lavaplayer_version" }
            lavalink   = { "com.github.Frederikam:Lavalink:$lavalink_version" }
            hocon = { "ninja.leaping.configurate:configurate-hocon:$hocon_version" }
            youtube = { "com.google.apis:google-api-services-youtube:$youtube_api_version" }
            jsoup = { "org.jsoup:jsoup:$jsoup_version" }
            h2 = { "com.h2database:h2:$h2_version" }
            slf4j = { "org.slf4j:slf4j-api:$slf4j_version" }
            logback = { "ch.qos.logback:logback-classic:$logback_version" }
            jagtag = { "com.jagrosh:JagTag:$jagtag_version" }
            kotlinJdk8 = { kotlinModule("stdlib-jdk8") }
            kotlinJdk7 = { kotlinModule("stdlib-jdk7") }
            kotlinReflect = { kotlinModule("reflect") }
            kotlinxCoroutines = { kotlinxModule("coroutines-core") }

            jupiter = { String module -> "org.junit.jupiter:junit-jupiter-$module:$jupiter_version" }
        }
    }

    repositories {
        jcenter()
        jitpack()
    }

    sourceSets {
        test {
            kotlin.srcDirs += 'src/test/kotlin'

            compileClasspath += main.compileClasspath
            runtimeClasspath += main.runtimeClasspath
        }
    }

    kotlin {
        experimental.coroutines = 'ENABLE'
    }

    compileKotlin {
        kotlinOptions {
            apiVersion = "1.2"
            jvmTarget = "1.8"
        }
    }

    compileTestKotlin {
        kotlinOptions {
            apiVersion = "1.2"
            jvmTarget = "1.8"
        }
    }

    compileJava {
        options.encoding = 'UTF-8'
    }

    compileTestJava {
        options.encoding = 'UTF-8'
    }
}

subprojects {
    dependencies {
        // Kotlin
        compileOnly kotlinModule("stdlib-jdk8")
        compileOnly kotlinModule("stdlib-jdk7")

        // Logging
        compileOnly slf4j()
    }

    jar {
        manifest {
            attributes 'Manifest-Version': "${ver.major}.${ver.minor}",
                       'Implementation-Version': "$version"
        }
    }

    shadowJar {
        baseName (project == rootProject ? "nightfury" : "nightfury-$project.name")
        version ''
        classifier ''

        manifest {
            attributes 'Manifest-Version': "${ver.major}.${ver.minor}"
        }
    }

    build {
        dependsOn clean
        dependsOn classes
        dependsOn shadowJar

        classes.mustRunAfter clean
        shadowJar.mustRunAfter classes
    }
}

apply plugin: 'application'
apply plugin: 'org.junit.platform.gradle.plugin'

mainClassName = "${group}.$rootProject.name"

dependencies {
    // Kotlin
    compile kotlinJdk8()
    compile kotlinJdk7()
    compile kotlinReflect()
    compile kotlinxCoroutines()
    compile kotlinModule("script-runtime")
    compile kotlinModule("script-util")
    runtime kotlinModule("compiler-embeddable")
    compile kotlinJson()

    // JDA
    compile JDA()
    compile JDAUtilities("commons")
    compile lavaplayer()

    // Config
    compile hocon()

    // h2
    compile h2()

    // Logging
    compile slf4j()
    compile logback()

    // Misc
    compile jagtag()
    compile jsoup()
    compile youtube()

    // Subprojects
    compile project(":commons")
    compile project(":database")

    testCompile kotlinModule("test-junit")
    testCompile jupiter("api")
    testRuntime jupiter("engine")
}

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

configurations {
    components {
        transitive = true
    }
}

wrapper {
    gradleVersion '4.3.1'
}

shadowJar {
    baseName 'nightfury'
    version ''
    classifier ''

    manifest {
        attributes 'Manifest-Version': "${ver.major}.${ver.minor}",
                   'Implementation-Version': "$version",
                   'Main-Class': mainClassName
    }
}
